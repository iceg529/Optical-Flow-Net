require 'torch'
require 'hdf5'
require 'image'
require 'nn'
require 'nngraph'
require 'cunn'
require 'cutorch'
loadfile('../AvgEndPointError.lua')()
loadfile('../AvgAngularError.lua')()
loadfile('../utils.lua')()
require 'xlua'

profiler = xlua.Profiler(false, true)
local myFile = hdf5.open('../trainData.h5', 'r')
local concatData = myFile:read('/data98'):all()
local im1 = concatData:sub(1,1,1,3):cuda()
local im2 = concatData:sub(1,1,4,6):cuda()
local flow2 = concatData:sub(1,1,7,8):cuda()
myFile:close()

local downSampleFlowWeights = getWeight(2, 7) -- convolution weights , args: 2 - num of channels , 7 - conv filter size
downSampleFlowWeights:cuda()

local meanFile = hdf5.open('../meanDataSintel.h5','r')
meanData = meanFile:read('/data'):all()     
meanFile:close()

local sampleFile = hdf5.open('../sampleForColorCoding.h5', 'r')
local img1 = sampleFile:read('/data1'):all()
local img2 = sampleFile:read('/data2'):all()
local flow = sampleFile:read('/data3'):all()
local epicFlow = sampleFile:read('/data4'):all()
sampleFile:close()


local tmpImg1 = torch.Tensor(1,img1:size(1),img1:size(2),img1:size(3))
local tmpImg2 = torch.Tensor(tmpImg1:size())
tmpImg1[1] = img1
tmpImg2[1] = img2
tmpImg1, tmpImg2 = normalizeMean(meanData, tmpImg1, tmpImg2)

img1 = tmpImg1[1]
img2 = tmpImg2[1]

img1 = image.scale(img1,1024,448)
img2 = image.scale(img2,1024,448)
flow = image.scale(flow,1024,448)
epicFlow = image.scale(epicFlow,1024,448)

--[[img1[1]:copy(im1[1])
img2[1]:copy(im2[1])
flow:copy(flow2[1])--]]

--[[img1[1] = image.crop(image.scale(image.rotate(image.translate(img1[1], -20, 30), 0.3, 'bilinear'), 512*2, 384*2), 'c', 512, 384)
img2[1] = image.crop(image.scale(image.rotate(image.translate(img2[1], -20, 30), 0.3, 'bilinear'), 512*2, 384*2), 'c', 512, 384)
flow = image.crop(image.scale(image.rotate(image.translate(flow, -20, 30), 0.3, 'bilinear'), 512*2, 384*2), 'c', 512, 384)--]]

local model2 = torch.load('../logFiles/finetuning/flownetLC9_LR3_100_Model.t7')

--tmpImg, tmpImg2 = normalizeMean(meanResized, tmpImg1, tmpImg2)
print(os.clock())
profiler:start('eval')
local input = torch.cat(img1, img2, 1):cuda() -- change later to im1[1] im2[1]

local pred = model2:forward(input)

local module = nn.SpatialUpSamplingBilinear(4):cuda()
local predFinal = module:forward(pred:cuda())
local mod = nn.SpatialConvolution(2,2, 7, 7, 4,4,3,3) -- nn.SpatialConvolution(2,2,1, 1, 4, 4, 0, 0)
mod.weight = downSampleFlowWeights
mod.bias = torch.Tensor(2):fill(0)
mod = mod:cuda()
local down5 = mod:forward(flow:cuda())

local criterion = nn.AvgEndPointError() --SmoothL1Criterion
criterion = criterion:cuda()
local err = criterion:forward(flow:cuda(), epicFlow:cuda())
print('Error ' .. err)
profiler:lap('eval')
print(os.clock())
torch.save('down.t7',predFinal)

--[[img2[1] = torch.add(img2[1], torch.randn(img2[1]:size())*0.04)

local img3 = img2[1]:clone()
img3[1]:mul(0.6)
img3[2]:mul(1.2)
img3[3]:mul(1.7)
local factor = img2[1]:sum()/(img3:sum()+0.001)
img2[1]:mul(factor)

img2[1]:clamp(0,255)
img2[1]:pow(0.9) --gamma
--img2[1]:clamp(0,255)

local weightFactor = torch.randn(img2[1]:size()):mul(0.2)
local lumaTensor = torch.Tensor():resizeAs(img2[1])
lumaTensor[1] = (image.rgb2yuv(img2[1]))[1]
lumaTensor[2]:copy(lumaTensor[1])
lumaTensor[3]:copy(lumaTensor[1])
lumaTensor:cmul(weightFactor:mul(-1):add(1))
img2[1]:cmul(weightFactor):add(lumaTensor) -- brightness addition ?? 

local contrastFac = 1-(-0.2)
local luma = (1 - contrastFac) * (image.rgb2yuv(img2[1]))[1]:mean()
img2[1]:mul(contrastFac):add(luma)

img2[1]:clamp(0,255) --]]
local outToCheck1 = model2:get(22).output
local outToCheck2 = model2:get(27).output
local outToCheck3 = model2:get(32).output
local outToCheck4 = model2:get(37).output
local outToCheck5 = model2:get(42).output
local modu = nn.SpatialUpSamplingBilinear(2):cuda()
itorch.image({img1,img2})
--itorch.image((model2:get(39).weight)[{{},{1},{},{}}])

itorch.image(predFinal)
itorch.image(modu:forward(outToCheck1:cuda())) -- itorch.image(model2:get(2).output)
itorch.image(outToCheck2) --itorch.image(predFinal)
itorch.image(outToCheck3)
itorch.image(outToCheck4)
itorch.image(outToCheck5)
